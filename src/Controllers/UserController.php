<?php

namespace App\Controllers;


use App\Entities\Database\Object\BaseObjectEntity;
use App\Enums\ActionConstructors\EUserConstructor;
use App\Models\Database\PermissionDatabase;
use App\Models\Database\RoleDatabase;
use App\Models\Database\RoleToPermissionDatabase;
use App\Models\Database\UserDatabase;
use App\Models\Database\UserToRoleDatabase;
use App\Models\Facade\RoleFacade;
use App\Models\Facade\UserFacade;
use App\Utilities\RedirectUtils;

class UserController extends BaseController
{
	protected $controllerName = EUserConstructor::CONTROLLER_NAME;
	public const VIEW_GRID = "src/Views/User/grid.latte";
	public const VIEW_EDIT = "src/Views/User/edit.latte";
	public function __construct($latte)
	{
		parent::__construct($latte);
		$this->userFacade = new UserFacade(new UserDatabase(), new UserToRoleDatabase());
		$this->roleFacade = new RoleFacade(new RoleDatabase(), new RoleToPermissionDatabase(), new PermissionDatabase());
	}

	public function show(?string $path = self::VIEW_EDIT, $args = null)
	{
		if ($path === self::VIEW_EDIT){
			$args['selectNames'] = $this->roleFacade->getAllRoles();
		}
		parent::show($path, $args);
	}

	public function actionEdit()
	{
		parent::actionEdit(); // TODO: Change the autogenerated stub
	}

	public function actionGrid()
	{
		$gridValues = $this->userFacade->getAllUsers();
		$args["gridvalues"] = $gridValues;
		$this->show(self::VIEW_GRID, $args); // TODO: Change the autogenerated stub
	}

	public function saveForm($variables):string
	{
		return $this->userFacade->saveUser($variables);
	}

	public function loadForm($variables)
	{
		$args['formData'] = $this->userFacade->getFullUser($variables[BaseObjectEntity::BASE_ID]);
		$this->show(self::VIEW_EDIT, $args);
	}

	public function redirectEdit($id)
	{
		RedirectUtils::redirectWithURLBuild(EUserConstructor::edit(), [BaseObjectEntity::BASE_ID => $id]);
	}

}