<?php

namespace App\Controllers;

use App\Entities\Database\Object\BaseObjectEntity;
use App\Enums\ActionConstructors\ERoleConstructor;
use App\Models\Database\PermissionDatabase;
use App\Models\Database\RoleDatabase;
use App\Models\Database\RoleToPermissionDatabase;
use App\Models\Facade\PermissionFacade;
use App\Models\Facade\RoleFacade;
use App\Utilities\RedirectUtils;

class RoleController extends BaseController
{

	public const VIEW_GRID = "src/Views/Role/grid.latte";
	public const VIEW_EDIT = "src/Views/Role/edit.latte";
	protected $controllerName = ERoleConstructor::CONTROLLER_NAME;
	public function __construct($latte)
	{
		parent::__construct($latte);
		$this->roleFacade = new RoleFacade(new RoleDatabase(), new RoleToPermissionDatabase(), new PermissionDatabase());
		$this->permissionFacade = new PermissionFacade(new PermissionDatabase());
	}

	public function show(string $path = self::VIEW_EDIT, $args = [])
	{
		$args['selectNames'] = $this->permissionFacade->getAllPermissions();
		return parent::show($path, $args); // TODO: Change the autogenerated stub
	}

	public function actionEdit()
	{
		parent::actionEdit(); // TODO: Change the autogenerated stub
	}

	protected function saveForm($variables)
	{
		return $this->roleFacade->saveRole($variables);
	}

	protected function loadForm($variables)
	{
		$args['formData'] = $this->roleFacade->getRoleById($variables[BaseObjectEntity::BASE_ID]);
		$this->show(self::VIEW_EDIT, $args);
	}

	protected function redirectEdit($id)
	{
		RedirectUtils::redirectWithURLBuild(ERoleConstructor::edit(), [BaseObjectEntity::BASE_ID => $id]);
	}
	public function actionGrid()
	{
		$gridValues = $this->roleFacade->getAllRoles();
		$args["gridvalues"] = $gridValues;
		$this->show(self::VIEW_GRID, $args);
	}
}