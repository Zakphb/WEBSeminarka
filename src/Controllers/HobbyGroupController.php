<?php

namespace App\Controllers;

use App\Entities\BaseObjectDatabaseEntity;
use App\Models\Database\HobbyGroupDatabase;
use App\Models\Facade\HobbyGroupFacade;
use App\Utilities\ActionMapper;
use App\Utilities\Login;

class HobbyGroupController extends BaseController
{
	public const VIEW_GRID = "src/Views/HobbyGroup/grid.latte";
	public const VIEW_EDIT = "src/Views/HobbyGroup/edit.latte";
	public const CONTROLLER_NAME = "hobbygroup";
	public const ACTION_EDIT = "hobbygroup.actionEdit";
	public const ACTIONS = [
		self::ACTION_EDIT
	];
	private $hobbyGroupFacade;

	public function __construct($latte)
	{
		$actions = new ActionMapper(self::ACTIONS, self::CONTROLLER_NAME);
		$mappedActions = $actions->mapActions();
		parent::__construct($latte, $mappedActions);
		$this->hobbyGroupFacade = new HobbyGroupFacade(new HobbyGroupDatabase());
	}

	public function show(?string $path = self::VIEW_EDIT, $args = [])
	{
		return parent::show($path, $args); // TODO: Change the autogenerated stub
	}

	public function getLatte()
	{
		return parent::getLatte(); // TODO: Change the autogenerated stub
	}

	public function getUser(): Login
	{
		return parent::getUser(); // TODO: Change the autogenerated stub
	}

	public function actionGrid()
	{
		$gridValues = $this->hobbyGroupFacade->getAllHobbyGroups();
		$args["gridvalues"] = $gridValues;
		$this->show(self::VIEW_GRID, $args);
	}

	public function actionEdit()
	{
		$variables = $_GET;
		if (!empty($variables))
		{
			bdump($variables);
			$this->loadForm($variables);
		} else
		{
			$variables = $_POST;
			if (!empty($variables))
			{
				$this->saveForm($variables);
			}
		}
	}

	private function saveForm($variables)
	{
		$this->hobbyGroupFacade->saveHobbyGroup($variables);
		$this->show(self::VIEW_EDIT);
	}

	private function loadForm($variables)
	{
		$args['formData'] = $this->hobbyGroupFacade->getHobbyGroupById($variables[BaseObjectDatabaseEntity::BASE_ID]);
		$this->show(self::VIEW_EDIT, $args);
	}

}