<?php

namespace App\Controllers;

use App\Entities\Database\Object\BaseObjectEntity;
use App\Enums\ActionConstructors\EHobbyGroupConstructor;
use App\Models\Database\HobbyGroupDatabase;
use App\Models\Database\UserDatabase;
use App\Models\Database\UserToHobbyGroupDatabase;
use App\Models\Database\UserToRoleDatabase;
use App\Models\Facade\HobbyGroupFacade;
use App\Models\Facade\UserFacade;
use App\Utilities\Login;
use App\Utilities\RedirectUtils;

class HobbyGroupController extends BaseController
{
	public const VIEW_GRID = "src/Views/HobbyGroup/grid.latte";
	public const VIEW_EDIT = "src/Views/HobbyGroup/edit.latte";
	protected $controllerName = EHobbyGroupConstructor::CONTROLLER_NAME;
	private HobbyGroupFacade $hobbyGroupFacade;

	/**
	 * @param $latte
	 */
	public function __construct($latte)
	{
		parent::__construct($latte);
		$this->hobbyGroupFacade = new HobbyGroupFacade(new HobbyGroupDatabase(), new UserToHobbyGroupDatabase());
	}

	/**
	 * @param string $path
	 * @param array $args
	 * @return mixed
	 */
	public function show(string $path = self::VIEW_EDIT, $args = [])
	{
		return parent::show($path, $args); // TODO: Change the autogenerated stub
	}

	/**
	 * @return mixed
	 */
	public function getLatte()
	{
		return parent::getLatte(); // TODO: Change the autogenerated stub
	}

	/**
	 * @return Login
	 */
	public function getUser(): Login
	{
		return parent::getUser(); // TODO: Change the autogenerated stub
	}

	/**
	 * @return mixed|void
	 */
	public function actionGrid()
	{
		$gridValues = $this->hobbyGroupFacade->getAllHobbyGroups();
		$args["gridvalues"] = $gridValues;
		$this->show(self::VIEW_GRID, $args);
	}

	/**
	 * @return mixed|void
	 */
	public function actionEdit()
	{
		parent::actionEdit(); // TODO: Change the autogenerated stub
	}

	/**
	 * @param $variables
	 * @return int|mixed
	 */
	public function saveForm($variables)
	{
		return $this->hobbyGroupFacade->saveHobbyGroup($variables);
	}

	/**
	 * @param $variables
	 * @return mixed|void
	 */
	public function loadForm($variables)
	{
		$args['formData'] = $this->hobbyGroupFacade->getFullHobbyGroup($variables[BaseObjectEntity::BASE_ID]);
		$this->show(self::VIEW_EDIT, $args);
	}

	/**
	 * @param $id
	 * @return mixed|void
	 */
	public function redirectEdit($id)
	{
		RedirectUtils::redirectWithURLBuild(EHobbyGroupConstructor::edit(), [BaseObjectEntity::BASE_ID => $id]);
	}



}